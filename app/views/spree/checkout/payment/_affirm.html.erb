<script>
(function(){
  /* only include this setup once */
  if (!window.AffirmPaymentMethods) {

    /*****************************************************\
        Include the affirm js snippet
    \*****************************************************/
    var _affirm_config = {
      public_api_key: "<%= payment_method.preferred_api_key %>",
      script: "https://<%= payment_method.preferences[:test_mode] ? 'cdn1-sandbox.affirm.com' : 'cdn1.affirm.com' %>/js/v2/affirm.js"
    };
    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,"set");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b="set add save post open empty reset on off trigger ready setProduct".split(" ");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=["get","token","url","items"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,"affirm","checkout","ui","script","ready");

    /*****************************************************\
        set the shared checkout data
    \*****************************************************/
    affirm.checkout({
      total:                <%= (@order.total * 100).to_i %>,
      currency:             "USD",
      tax_amount:           <%= (@order.additional_tax_total * 100).to_i %>,
      order_id:             "<%= @order.number %>",
      discount_code:        "<%= @order.coupon_code %>",
      shipping_type:        "<%= @order.shipments.first.shipping_method.name if @order.shipments.exists? %>",
      shipping_amount:      <%= (@order.shipment_total * 100).to_i %>,

      shipping: {
        name: {
          full:  "<%= @order.ship_address.full_name %>",
        },
        address: {
          line1:        "<%= @order.ship_address.address1 %>",
          line2:        "<%= @order.ship_address.address2 %>",
          city:         "<%= @order.ship_address.city %>",
          state:        "<%= @order.ship_address.state_text %>",
          country:      "<%= @order.ship_address.country.iso %>",
          zipcode:      "<%= @order.ship_address.zipcode %>",
        }
      },

      billing: {
        email: "<%= @order.email %>",
        name: {
          full:   "<%= @order.bill_address.full_name %>"
        },
        address: {
          line1:          "<%= @order.bill_address.address1 %>",
          line2:          "<%= @order.bill_address.address2 %>",
          city:           "<%= @order.bill_address.city %>",
          state:          "<%= @order.bill_address.state_text %>",
          country:        "<%= @order.bill_address.country.iso %>",
          zipcode:        "<%= @order.bill_address.zipcode %>",
        }
      },


      metadata: {
            "platform_type": "Spree Commerce",
            "platform_version": "<%= Spree.version %>",
            "platform_affirm": "<%= Spree::Gateway::Affirm.version %>",
          },

      meta: {
        source: {
          data: {
            <% if spree_current_user %>
              order_count: "<%= spree_current_user.orders.complete.count %>",
              account_created: "<%= spree_current_user.created_at %>",

              <% if spree_current_user.orders.complete.any? %>
                last_order_date: "<%= spree_current_user.orders.complete.last.completed_at %>",
              <% end %>

            <% end %>
            is_logged_in: <%= !!spree_current_user %>,
          }
        }
      },

      merchant: {
        user_confirmation_url:    "<%= confirm_affirm_url(:payment_method_id => payment_method.id) %>",
        user_cancel_url:          "<%= cancel_affirm_url(:payment_method_id => payment_method.id) %>",
      },

      config: {
        required_billing_fields:      "name,address,email",
      },


      <% if @order.promotions.any? %>
      discounts: {
        <% @order.adjustments.promotion.each do |adjustment| %>
          "<%= adjustment.label %>": {
            discount_amount:       <%= (0-adjustment.amount*100).to_i %>,
            discount_display_name: "<%= adjustment.label %>"
          },
        <% end %>
      },
      <% end %>

      items: [
        <% @order.line_items.each do |item| %>
        {
          <% if item.variant.images.any? %>
            item_image_url: "<%= URI.join(root_url, item.variant.images.first.attachment.url(:large)) %>",
          <% elsif item.variant.product.images.any? %>
            item_image_url: "<%= URI.join(root_url, item.variant.product.images.first.attachment.url(:large)) %>",
          <% end %>

          qty:           <%= item.quantity %>,
          sku:           "<%= item.variant.sku %>",
          item_url:      "<%= product_url(item.product) %>",
          unit_price:    <%= item.price * 100 %>,
          display_name:  "<%= raw(item.variant.product.name) %>"
        },
        <% end %>
      ]
    });


    /* wait for the DOM to be ready */
    affirm.ui.ready(function(){
      $(function() {

        /*****************************************************\
            change the payment method name
        \*****************************************************/

        $( ".payment-option" ).each(function() {
          
          if($( this )[0].innerText === "Affirm"){

           $( this )[0].lastChild.data = "Affirm Monthly Payments";
          }
        });

        /*****************************************************\
            setup loading and cancel events for the form
        \*****************************************************/

        affirm.checkout.on("cancel", function(){
          $("#checkout_form_payment input.disabled")
            .attr("disabled", false)
            .removeClass("disabled");
        });

        /*****************************************************\
            handle continue button clicks with .open()
        \*****************************************************/
        $('#checkout_form_payment').submit(function(e){
          var checkedPaymentMethod = $('div[data-hook="checkout_payment_step"] input[type="radio"]:checked').val();

          if (window.AffirmPaymentMethods[checkedPaymentMethod]) {

            var $submit_button = $(this).find("input[type='submit']");

            // update with checkout method details
            affirm.checkout(window.AffirmPaymentMethods[checkedPaymentMethod]);

            // submit the checkout
            affirm.checkout.open({
              target: $submit_button
            });

            e.preventDefault();
            return false;
          }
        });
      });

      /*****************************************************\
          remove the payment source empty box from UI
      \*****************************************************/
      $(document).on('click', '#checkout_form_payment'
        , function (event) {
          if($('div[data-hook="checkout_payment_step"] input[type="radio"]:checked')[0].parentNode.outerText === "Affirm Monthly Payments") $('.payment-sources').hide();
        }
      )
    });

    window.AffirmPaymentMethods = {};
  }


  /*****************************************************\
      set the product/button specific data to be
      used when the continue button is directly
      clicked
  \*****************************************************/
  window.AffirmPaymentMethods["<%= payment_method.id %>"] = {
    public_api_key:           "<%= payment_method.preferred_api_key %>"
  };
}());

</script>
